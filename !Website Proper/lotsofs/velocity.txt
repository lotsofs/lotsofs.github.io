storing velocity relative to the vehicle's forward vector:

local function matrix_mult_vec(m, x, y, z)
  return  x*m[1][1] + y*m[2][1] + z*m[3][1],
  x*m[1][2] + y*m[2][2] + z*m[3][2],
  x*m[1][3] + y*m[2][3] + z*m[3][3]
end
local function transpose(m)
  return {{m[1][1], m[2][1], m[3][1]},
  {m[1][2], m[2][2], m[3][2]},
  {m[1][3], m[2][3], m[3][3]}}
end



when you want to store the velocity,

local matrix = transpose(getElementMatrix(vehicle, false))
local vx, vy, vz = getElementVelocity(vehicle)
VX, VY, VZ = matrix_mult_vec(matrix, vx, vy, vz)



when you want to retrieve it and add it to the new vehicle's forward,

local matrix = getElementMatrix(vehicle, false)
local x, y, z = unpack(matrix[4])
local dx, dy, dz = matrix_mult_vec(matrix, VX, VY, VZ)
dxDrawLine3D(x, y, z, x+dx*20, y+dy*20, z+dz*20)


false here is just some stupid legacy argument thing, not needed here, but will bite you if you do 4x4 stuff (we ignore the 4th row and columns in this snippet)
except for the fact that i use unpack(matrix[4]) as a shorthand for getelementposition, you do know how matrices work, don't you??